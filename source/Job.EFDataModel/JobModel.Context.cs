//------------------------------------------------------------------------------
// <auto-generated>
//     Codice generato da un modello.
//
//     Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//     Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Job.EFDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JobEntities : DbContext
    {
        public JobEntities()
            : base("name=JobEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AutoNumberBase> AutoNumberBase { get; set; }
        public virtual DbSet<BankAccounts> BankAccounts { get; set; }
        public virtual DbSet<CustomerBusinessGroup> CustomerBusinessGroup { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<GeneralJournalLineEntries> GeneralJournalLineEntries { get; set; }
        public virtual DbSet<GeneralJournalLines> GeneralJournalLines { get; set; }
        public virtual DbSet<GLAccount> GLAccount { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<JobStatus> JobStatus { get; set; }
        public virtual DbSet<JobTasks> JobTasks { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<TravelExpenseLineCategories> TravelExpenseLineCategories { get; set; }
        public virtual DbSet<TravelExpenses> TravelExpenses { get; set; }
        public virtual DbSet<TravelExpensesLines> TravelExpensesLines { get; set; }
        public virtual DbSet<TravelExpenseStatus> TravelExpenseStatus { get; set; }
        public virtual DbSet<UnitOfMeasure> UnitOfMeasure { get; set; }
        public virtual DbSet<WorksJournal> WorksJournal { get; set; }
        public virtual DbSet<JobTotalPeopleWorkedHours> JobTotalPeopleWorkedHours { get; set; }
        public virtual DbSet<JobWorkList> JobWorkList { get; set; }
        public virtual DbSet<TravelExpenseList> TravelExpenseList { get; set; }
        public virtual DbSet<PersonBusinessAccount> PersonBusinessAccount { get; set; }
        public virtual DbSet<JobBalance> JobBalance { get; set; }
        public virtual DbSet<JobBusinessGroup> JobBusinessGroup { get; set; }
        public virtual DbSet<JobList> JobList { get; set; }
        public virtual DbSet<PrePaymentRefound> PrePaymentRefound { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<JobActual> JobActual { get; set; }
        public virtual DbSet<JobExpected> JobExpected { get; set; }
    
        public virtual int upCustomerDelete(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upCustomerDelete", customerIdParameter);
        }
    
        public virtual int upGetElementNumber(string element, Nullable<int> year, ObjectParameter resultId)
        {
            var elementParameter = element != null ?
                new ObjectParameter("Element", element) :
                new ObjectParameter("Element", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upGetElementNumber", elementParameter, yearParameter, resultId);
        }
    
        public virtual ObjectResult<upJobAdd_Result> upJobAdd(Nullable<long> customerId, string code, string description, Nullable<int> year, Nullable<byte> status)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upJobAdd_Result>("upJobAdd", customerIdParameter, codeParameter, descriptionParameter, yearParameter, statusParameter);
        }
    
        public virtual int upJobDelete(Nullable<int> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("jobId", jobId) :
                new ObjectParameter("jobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upJobDelete", jobIdParameter);
        }
    
        public virtual ObjectResult<upOreMensiliLavorateGiornaliero_Result> upOreMensiliLavorateGiornaliero(Nullable<int> peopleId, Nullable<System.DateTime> beginDate)
        {
            var peopleIdParameter = peopleId.HasValue ?
                new ObjectParameter("PeopleId", peopleId) :
                new ObjectParameter("PeopleId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upOreMensiliLavorateGiornaliero_Result>("upOreMensiliLavorateGiornaliero", peopleIdParameter, beginDateParameter);
        }
    
        public virtual int upPostExpensePaymentRefound(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upPostExpensePaymentRefound", idParameter);
        }
    
        public virtual int upPostPaymentToPerson(Nullable<System.DateTime> date, Nullable<int> peopleId, Nullable<decimal> compenso, Nullable<decimal> tasse, Nullable<decimal> iNPS, string bankAccount)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var peopleIdParameter = peopleId.HasValue ?
                new ObjectParameter("PeopleId", peopleId) :
                new ObjectParameter("PeopleId", typeof(int));
    
            var compensoParameter = compenso.HasValue ?
                new ObjectParameter("Compenso", compenso) :
                new ObjectParameter("Compenso", typeof(decimal));
    
            var tasseParameter = tasse.HasValue ?
                new ObjectParameter("Tasse", tasse) :
                new ObjectParameter("Tasse", typeof(decimal));
    
            var iNPSParameter = iNPS.HasValue ?
                new ObjectParameter("INPS", iNPS) :
                new ObjectParameter("INPS", typeof(decimal));
    
            var bankAccountParameter = bankAccount != null ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upPostPaymentToPerson", dateParameter, peopleIdParameter, compensoParameter, tasseParameter, iNPSParameter, bankAccountParameter);
        }
    
        public virtual int upPostTravelExpense(string travelExpenseCode)
        {
            var travelExpenseCodeParameter = travelExpenseCode != null ?
                new ObjectParameter("TravelExpenseCode", travelExpenseCode) :
                new ObjectParameter("TravelExpenseCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upPostTravelExpense", travelExpenseCodeParameter);
        }
    
        public virtual ObjectResult<upTravelExpenseAdd_Result> upTravelExpenseAdd(Nullable<System.DateTime> date, string annotation, Nullable<int> peopleId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var annotationParameter = annotation != null ?
                new ObjectParameter("Annotation", annotation) :
                new ObjectParameter("Annotation", typeof(string));
    
            var peopleIdParameter = peopleId.HasValue ?
                new ObjectParameter("PeopleId", peopleId) :
                new ObjectParameter("PeopleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upTravelExpenseAdd_Result>("upTravelExpenseAdd", dateParameter, annotationParameter, peopleIdParameter);
        }
    }
}
